(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'db' is not defined"
p3
sS'layer'
p4
S'C:\\Users\\suporte_renato\\Downloads\\web2py\\applications\\money\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\nfrom functions import *\nappname = \'Money Manager\'\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    if auth.user:\n        redirect(URL(\'expenses\'))\n        #return dict()\n    else:\n        return dict(\n            form=auth.login(),\n            appname=appname,\n        )\n\n@auth.requires_login()\ndef expenses():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    myexpenses = []\n    success = True\n    message = \'\'\n    money = debit = credit = 0.0\n    cur_month = int(datetime.now().month)\n    cur_year = int(datetime.now().year)\n    year_list = range(2010,cur_year + 1)\n    cur_values = {}\n    owner_id = 0\n    try:\n        owner_id = db(db.auth_user.username == auth.user.username).select(db.auth_user.id)[0].id\n        if request.vars.cur_month:\n            cur_month = int(request.vars.cur_month)\n        if request.vars.cur_year:\n            cur_year = int(request.vars.cur_year)\n        elif request.vars.is_submition:\n            e_data = request.vars.e_data\n            e_month = e_data.split(\'-\')[1]\n            e_year = request.vars.e_data.split(\'-\')[0]\n            e_description = request.vars.e_description\n            e_type = request.vars.e_type\n            e_value = request.vars.e_value\n            e_payment = request.vars.e_payment\n            db.expenses.insert(\n                e_owner=owner_id,\n                e_year=e_year,\n                e_month=e_month,\n                e_data=e_data,\n                e_description=e_description,\n                e_type=e_type,\n                e_value=e_value,\n                e_payment=e_payment,\n            )\n            update_accounts(e_value,e_payment,\'Saida\')\n        myexpenses = db(db.expenses.e_owner == owner_id)(db.expenses.e_year == cur_year)(db.expenses.e_month == cur_month).select(db.expenses.ALL)\n        money_list = db(db.expenses.e_owner == owner_id)(db.expenses.e_year == cur_year)(db.expenses.e_month == cur_month)(db.expenses.e_payment == \'Dinheiro\').select(db.expenses.e_value)\n        money = reduce(lambda x,y: x+y.e_value, money_list, 0.0)\n        debit_list = db(db.expenses.e_owner == owner_id)(db.expenses.e_year == cur_year)(db.expenses.e_month == cur_month)(db.expenses.e_payment == \'Cart\xc3\xa3o de D\xc3\xa9bito\').select(db.expenses.e_value)\n        debit = reduce(lambda x,y: x+y.e_value, debit_list, 0.0)\n        credit_list = db(db.expenses.e_owner == owner_id)(db.expenses.e_year == cur_year)(db.expenses.e_month == cur_month)(db.expenses.e_payment == \'Cart\xc3\xa3o de Cr\xc3\xa9dito\').select(db.expenses.e_value)\n        credit = reduce(lambda x,y: x+y.e_value, credit_list, 0.0)\n    except Exception as err:\n        message = auth.user.email if auth.user else \'\'\n        success = False\n    return dict(\n        year_list=year_list,\n        cur_year=cur_year,\n        cur_month=cur_month,\n        expenses=myexpenses,\n        message=message,\n        success=success,\n        somas={\'money\':money,\'debit\':debit,\'credit\':credit},\n#        cur_values=calculate_values(db,owner_id),\n        cur_values = calculate_values(),\n#        cur_values = {\'wallet\':0.0,\'bank\':0.0,\'savings\':0.0},\n        appname=appname,\n    )\n\n@auth.requires_login()\ndef inout():\n    expenses = []\n    success = True\n    message = \'\'\n    money = debit = credit = 0.0\n    cur_month = int(datetime.now().month)\n    cur_year = int(datetime.now().year)\n    year_list = range(2010,cur_year + 1)\n    cur_values = {}\n    owner_id = 0\n    try:\n        owner_id = db(db.auth_user.username == auth.user.username).select(db.auth_user.id)[0].id\n        if request.vars.cur_month:\n            cur_month = int(request.vars.cur_month)\n        if request.vars.cur_year:\n            cur_year = int(request.vars.cur_year)\n        elif request.vars.is_submition:\n            e_register = request.vars.e_register\n            e_data = request.vars.e_data\n            e_month = int(request.vars.e_data.split(\'-\')[1])\n            e_year = int(request.vars.e_data.split(\'-\')[0])\n            e_value = request.vars.e_value\n            e_description = request.vars.e_description\n            e_type = request.vars.e_type\n            e_source = request.vars.e_source\n            e_sink = request.vars.e_sink\n            db.in_out.insert(\n                e_owner=owner_id,\n                e_register=e_register,\n                e_year=e_year,\n                e_month=e_month,\n                e_data=e_data,\n                e_description=e_description,\n                e_type=e_type,\n                e_value=e_value,\n                e_source=e_source,\n                e_sink=e_sink,\n            )\n            update_accounts(db,auth,e_value,e_sink if e_register == \'Entrada\' else e_source,e_register)\n        expenses = db(db.in_out.e_owner == owner_id)(db.in_out.e_year == cur_year)(db.in_out.e_month == cur_month).select(db.in_out.ALL)\n    except Exception as err:\n        message = err.message\n        success = False\n    return dict(\n        year_list=year_list,\n        cur_year=cur_year,\n        cur_month=cur_month,\n        expenses=expenses,\n        message=message,\n        success=success,\n#        cur_values=calculate_values(db,owner_id),\n        cur_values = calculate_values(db,auth),\n        appname=appname,\n    )\n\n@auth.requires_login()\ndef planning():\n    expenses = []\n    success = True\n    message = \'\'\n    money = debit = credit = 0.0\n    cur_month = int(datetime.now().month)\n    cur_year = int(datetime.now().year)\n    year_list = range(2010,cur_year + 1)\n    cur_values = {}\n    owner_id = 0\n    try:\n        owner_id = db(db.auth_user.username == auth.user.username).select(db.auth_user.id)[0].id\n        if request.vars.cur_month:\n            cur_month = int(request.vars.cur_month)\n        if request.vars.cur_year:\n            cur_year = int(request.vars.cur_year)\n        elif request.vars.is_submition:\n            e_register = request.vars.e_register\n            e_description = request.vars.e_description\n            e_type = request.vars.e_type\n            e_value = request.vars.e_value\n            db.planning.insert(\n                e_owner=owner_id,\n                e_year=cur_year,\n                e_month=cur_month,\n                e_register=e_register,\n                e_description=e_description,\n                e_value=e_value,\n            )\n        expenses = db(db.planning.e_owner == owner_id)(db.planning.e_year == cur_year)(db.planning.e_month == cur_month).select(db.planning.ALL)\n    except Exception as err:\n        message = err.message\n        success = False\n    return dict(\n        year_list=year_list,\n        cur_year=cur_year,\n        cur_month=cur_month,\n        expenses=expenses,\n        message=message,\n        success=success,\n#        cur_values=calculate_values(db,owner_id),\n        cur_values = calculate_values(db,auth),\n        appname=appname,\n    )\n\n@auth.requires_login()\ndef credit():\n    expenses = []\n    success = True\n    message = \'\'\n    money = debit = credit = 0.0\n    cur_day = int(datetime.now().day)\n    cur_month = int(datetime.now().month)\n    cur_year = int(datetime.now().year)\n    year_list = range(2010,cur_year + 1)\n    total_credit = 0.0\n    num = 0\n    cur_values = {}\n    owner_id = 0\n    try:\n        owner_id = db(db.auth_user.username == auth.user.username).select(db.auth_user.id)[0].id\n        if request.vars.cur_month:\n            cur_month = int(request.vars.cur_month)\n        if request.vars.cur_year:\n            cur_year = int(request.vars.cur_year)\n        credit_expenses = db(db.expenses.e_payment == \'Cart\xc3\xa3o de Cr\xc3\xa9dito\').select(db.expenses.ALL)\n        expenses = []\n        for credit_expense in credit_expenses:\n            year = credit_expense.e_year\n            month = credit_expense.e_month\n            day = credit_expense.e_day\n            if not ( (year <= cur_year) and (month <= ((cur_year - year)* 12 + (cur_month - 1))) and (day <= 26) ): continue\n            month = credit_expense.e_month + 1 if day <= 26 else credit_expense.e_month + 2\n            quant = credit_expense.e_quant\n            n_par = 12*(cur_year - year) + (cur_month - credit_expense.e_month)\n            num = n_par if n_par <= quant else 0\n            month += quant\n            while month > 12:\n                month -= 12\n                year += 1\n            if year >= cur_year or month >= cur_month:\n                credit_expense.e_value /= quant\n                credit_expense.e_quant = num\n                expenses.append(credit_expense)\n        total_credit = reduce(lambda x,y: x+y.e_value, expenses, 0.0)\n    except Exception as err:\n        message = err.message\n        success = False\n    return dict(\n        year_list=year_list,\n        cur_year=cur_year,\n        cur_month=cur_month,\n        expenses=expenses,\n        message=message,\n        success=success,\n        total_credit=total_credit,\n#        cur_values=calculate_values(db,owner_id),\n        cur_values = calculate_values(db,auth),\n        appname=appname,\n    )\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(\n        form=auth(),\n        appname=appname,\n    )\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(expenses)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\suporte_renato\\Downloads\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "C:\\Users\\suporte_renato\\Downloads\\web2py\\applications\\money\\controllers/default.py", line 300, in <module>\n  File "C:\\Users\\suporte_renato\\Downloads\\web2py\\gluon\\globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\suporte_renato\\Downloads\\web2py\\gluon\\tools.py", line 3449, in f\n    return action(*a, **b)\n  File "C:\\Users\\suporte_renato\\Downloads\\web2py\\applications\\money\\controllers/default.py", line 86, in expenses\n    cur_values = calculate_values(),\n  File "applications\\money\\modules\\functions.py", line 40, in calculate_values\nNameError: global name \'db\' is not defined\n'
p11
s.